object Test {
  def αρετη: java.lang.String = "alpha rho epsilon tau eta"
  case class GGG(i: scala.Int) {
    override def hashCode(): scala.Int = {
      var acc: scala.Int = 767242539
      acc = scala.runtime.Statics.mix(acc, GGG.this.i)
      scala.runtime.Statics.finalizeHash(acc, 1)
    }
    override def equals(x$0: scala.Any): scala.Boolean = GGG.this.eq(x$0.$asInstanceOf$[java.lang.Object]).||(x$0 match {
      case x$0: Test.GGG @scala.unchecked =>
        GGG.this.i.==(x$0.i)
      case _ =>
        false
    })
    override def toString(): java.lang.String = scala.runtime.ScalaRunTime._toString(GGG.this)
    override def canEqual(that: scala.Any): scala.Boolean = that.isInstanceOf[Test.GGG @scala.unchecked]
    override def productArity: scala.Int = 1
    override def productPrefix: java.lang.String = "GGG"
    override def productElement(n: scala.Int): scala.Any = n match {
      case 0 =>
        GGG.this._1
      case _ =>
        throw new java.lang.IndexOutOfBoundsException(n.toString())
    }
    def αα(that: Test.GGG): scala.Int = GGG.this.i.+(that.i)
  }
  object GGG extends scala.Function1[scala.Int, Test.GGG]
  def check_success[a](name: scala.Predef.String, closure: => a, expected: a): scala.Unit = {
    scala.Predef.print("test ".+(name))
    try {
      val actual: a = closure
      if (actual.==(expected)) scala.Predef.print(" was successful") else scala.Predef.print(" failed: expected ".+(expected).+(", found ").+(actual))
    } catch {
      case exception: scala.Throwable =>
        scala.Predef.print(" raised exception ".+(exception))
    }
    scala.Predef.println()
  }
  def main(args: scala.Array[scala.Predef.String]): scala.Unit = {
    Test.check_success[scala.Char]("\'\\u0024\' == \'$\'", '$', '$')
    Test.check_success[scala.Char]("\'\\u005f\' == \'_\'", '_', '_')
    Test.check_success[scala.Char]("65.asInstanceOf[Char] == \'A\'", 65.asInstanceOf[scala.Char], 'A')
    Test.check_success[java.lang.String]("\"\\141\\142\" == \"ab\"", "ab", "ab")
    Test.check_success[java.lang.String]("\"\\0x61\\0x62\".trim() == \"x61\\0x62\"", "\00x61\00x62".substring(1), "x61\00x62")
    scala.Predef.println()
    Test.check_success[scala.Boolean]("(65 : Byte) == \'A\'", (65: scala.Byte).==('A'), true)
    scala.Predef.println()
    Test.check_success[scala.Int]("0X01 == 1", 1, 1)
    Test.check_success[scala.Int]("0x01 == 1", 1, 1)
    Test.check_success[scala.Int]("0x10 == 16", 16, 16)
    Test.check_success[scala.Int]("0xa == 10", 10, 10)
    Test.check_success[scala.Int]("0x0a == 10", 10, 10)
    Test.check_success[scala.Int]("+0x01 == 1", 1.unary_+, 1)
    Test.check_success[scala.Int]("+0x10 == 16", 16.unary_+, 16)
    Test.check_success[scala.Int]("+0xa == 10", 10.unary_+, 10)
    Test.check_success[scala.Int]("+0x0a == 10", 10.unary_+, 10)
    Test.check_success[scala.Int]("-0x01 == -1", -1, -1)
    Test.check_success[scala.Int]("-0x10 == -16", -16, -16)
    Test.check_success[scala.Int]("-0xa == -10", -10, -10)
    Test.check_success[scala.Int]("-0x0a == -10", -10, -10)
    Test.check_success[scala.Int]("0x7fffffff == 2147483647", 2147483647, 2147483647)
    Test.check_success[scala.Int]("0x80000000 == -2147483648", -2147483648, -2147483648)
    Test.check_success[scala.Int]("0xffffffff == -1", -1, -1)
    scala.Predef.println()
    Test.check_success[scala.Long]("1l == 1L", 1L, 1L)
    Test.check_success[scala.Long]("1L == 1l", 1L, 1L)
    Test.check_success[scala.Long]("1.asInstanceOf[Long] == 1l", 1.asInstanceOf[scala.Long], 1L)
    Test.check_success[scala.Long]("0x7fffffffffffffffL == 9223372036854775807L", 9223372036854775807L, 9223372036854775807L)
    Test.check_success[scala.Long]("0x8000000000000000L == -9223372036854775808L", -9223372036854775808L, -9223372036854775808L)
    Test.check_success[scala.Long]("0xffffffffffffffffL == -1L", -1L, -1L)
    scala.Predef.println()
    Test.check_success[scala.Float]("1e1f == 10.0f", 10.0f, 10.0f)
    Test.check_success[scala.Float](".3f == 0.3f", 0.3f, 0.3f)
    Test.check_success[scala.Float]("0f == 0.0f", 0.0f, 0.0f)
    Test.check_success[scala.Float]("3.14f == 3.14f", 3.14f, 3.14f)
    Test.check_success[scala.Float]("6.022e23f == 6.022e23f", 6.022E23f, 6.022E23f)
    Test.check_success[scala.Float]("09f == 9.0f", 9.0f, 9.0f)
    Test.check_success[scala.Float]("1.asInstanceOf[Float] == 1.0", 1.asInstanceOf[scala.Float], 1.0f)
    Test.check_success[scala.Float]("1l.asInstanceOf[Float] == 1.0", 1L.asInstanceOf[scala.Float], 1.0f)
    scala.Predef.println()
    Test.check_success[scala.Double]("1e1 == 10.0", 10.0, 10.0)
    Test.check_success[scala.Double](".3 == 0.3", 0.3, 0.3)
    Test.check_success[scala.Double]("0.0 == 0.0", 0.0, 0.0)
    Test.check_success[scala.Double]("0d == 0.0", 0.0, 0.0)
    Test.check_success[scala.Double]("01.23 == 1.23", 1.23, 1.23)
    Test.check_success[scala.Double]("01.23d == 1.23d", 1.23, 1.23)
    Test.check_success[scala.Double]("3.14 == 3.14", 3.14, 3.14)
    Test.check_success[scala.Double]("1e-9d == 1.0e-9", 1.0E-9, 1.0E-9)
    Test.check_success[scala.Double]("1e137 == 1.0e137", 1.0E137, 1.0E137)
    Test.check_success[scala.Double]("1.asInstanceOf[Double] == 1.0", 1.asInstanceOf[scala.Double], 1.0)
    Test.check_success[scala.Double]("1l.asInstanceOf[Double] == 1.0", 1L.asInstanceOf[scala.Double], 1.0)
    scala.Predef.println()
    Test.check_success[scala.Int]("\"\".length()", "\032".length(), 1)
    val ggg: scala.Int = Test.GGG.apply(1).αα(Test.GGG.apply(2))
    Test.check_success[scala.Int]("ggg == 3", ggg, 3)
  }
}
