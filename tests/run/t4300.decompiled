trait A() extends java.lang.Object {
  def f(): scala.Unit = scala.Predef.println("A")
}
class B() extends A {
  def b(): scala.Unit = super[A].f()
  trait C() extends java.lang.Object {
    def c(): scala.Unit = B.super[A].f()
  }
  def g(): scala.Unit = scala.Predef.intWrapper(0).until(1).foreach[scala.Unit](((i: scala.Int) => super[A].f()))
  def h(): scala.Unit = scala.Predef.intWrapper(0).until(1).foreach[scala.Unit](((i: scala.Int) => B.super[A].f()))
  override def f(): scala.Unit = scala.Predef.println("B")
}
object Test {
  def main(args: scala.Array[scala.Predef.String]): scala.Unit = {
    val b: B = new B()
    b.b()

    {
      final class $anon() extends b.C

      (new $anon(): b.C)
    }.c()
    b.g()
    b.h()
  }
}
